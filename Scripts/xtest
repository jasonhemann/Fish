#! /bin/sh
#| -*- racket -*-
exec racket -tm "$0" -- ${1+"$@"}
|#
#lang racket

;; usage:
;; ./xtest path-to-player --file path-to-file.json
;; or
;; ./xtest path-to-player players = P rows = R ... 
;;
;; The file is used to configure the `server` to set up some number P of (internal) house players
;; that then compete against the specified external player
;; running on the same machine but communicating via TCP.
;; The script forwards the rmeote player's STDOUT but only for up to 3s after the tournament is over.

;; EXAMPLE:
;;   ./xtest ./x1client --file players = 4
;; This sets up four house players and starts `x1client PORT` as an external process.
;; `x1client` sets up a player that displays each (remote) method call to STDOUT.

;; TODO:
;; -- the script must pass along options to the tournament `manager`.
;; -- include the specification for an internal observer

(provide main)

;; ---------------------------------------------------------------------------------------------------
(require Fish/Scripts/Private/configure)
(require Fish/Scripts/Private/run-server-client)
(require Fish/Player/player)
(require Fish/Player/greedy)

(require SwDev/Testing/harness)
(require SwDev/Testing/communication)

;; ---------------------------------------------------------------------------------------------------

(define TIME (+ (+ 30 30) 60)) ;; maximum wait time for tournament to end; should probably be inf

(define (main path-to-remote . c)
  (define h (configure-server c))
  (define players# (dict-ref h 'players))
  (define port (dict-ref h 'port))
  
  (define players (build-list players# (λ _ (new player% [strategy (new strategy%)]))))
  (define-values (s-in _1 tear-down-server) (local-setup (λ () (run-server port #:house players))))
  (define-values (r-in _2 tear-down-remote) [(make-setup path-to-remote (list (~a port)) values)])

  (define th
    (thread
     (λ ()
       (let loop ()
         (define next (read-line r-in))
         (unless (eof-object? next)
           (displayln next)
           (loop))))))

  ;; after the tournament is run: 
  (parameterize ((io-time-out TIME))
    (displayln `[the result produced by the server ,(read-message s-in)]))
  
  (tear-down-server)

  (sync/timeout 3 th)
  (tear-down-remote))
